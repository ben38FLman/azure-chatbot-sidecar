trigger:
  branches:
    include:
    - main
  paths:
    include:
    - ARM_Deployments/Storage/*

variables:
  # Azure Connection Settings
  azureServiceConnection: 'MSFT-NonProd-DevOpsConnection'
  subscriptionId: 'f16506c7-8141-4ef7-8a2e-67f11b6f8acd'
  
  # Resource Settings
  resourceGroupName: 'rg-storage-nonprod'
  location: 'eastus'
  
  # Bicep Template Files
  bicepFile: 'ARM_Deployments/Storage/StorageAccount.bicep'
  bicepParamsFile: 'ARM_Deployments/Storage/StorageAccount.bicepparam'
  
  # Deployment Settings
  deploymentName: 'StorageAccount-Bicep-$(Build.BuildId)'

stages:
- stage: ValidateStorage
  displayName: 'üîç Validate Bicep Storage Template'
  jobs:
  - job: ValidateTemplate
    displayName: 'Validate Storage Account Bicep Template'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: PowerShell@2
      displayName: 'üìã Display Storage Configuration'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üóÉÔ∏è Storage Account Bicep Deployment Configuration" -ForegroundColor Cyan
          Write-Host "===============================================" -ForegroundColor Cyan
          Write-Host "Resource Group: $(resourceGroupName)" -ForegroundColor White
          Write-Host "Location: $(location)" -ForegroundColor White
          Write-Host "Bicep Template: $(bicepFile)" -ForegroundColor White
          Write-Host "Parameters File: $(bicepParamsFile)" -ForegroundColor White
    
    - task: AzureCLI@2
      displayName: 'Install Latest Bicep'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîß Installing latest Bicep CLI..."
          az bicep install
          az bicep version
          echo "‚úÖ Bicep CLI ready!"
    
    - task: AzureCLI@2
      displayName: 'Validate Bicep Storage Template'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Validating Bicep storage template..."
          echo "üìÅ Bicep File: $(bicepFile)"
          echo "üìã Parameters File: $(bicepParamsFile)"
          
          # Compile Bicep to ARM for validation
          echo "üî® Compiling Bicep to ARM..."
          az bicep build --file "$(bicepFile)" --outfile "temp-compiled.json"
          
          echo "üèóÔ∏è Creating resource group for validation..."
          az group create --name $(resourceGroupName) --location "$(location)" --output table
          
          # Validate the compiled template with parameters
          echo "‚úÖ Validating deployment..."
          az deployment group validate \
            --resource-group $(resourceGroupName) \
            --template-file "temp-compiled.json" \
            --parameters @"$(bicepParamsFile)" \
            --verbose
          
          echo "‚úÖ Bicep storage template validation completed successfully!"

- stage: DeployStorage
  displayName: 'üöÄ Deploy Bicep Storage Account'
  dependsOn: ValidateStorage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployStorageAccount
    displayName: 'Deploy Storage Account from Bicep'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'nonprod-azure'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Repository'
          
          - task: AzureCLI@2
            displayName: 'Install Latest Bicep'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üîß Installing latest Bicep CLI..."
                az bicep install
                az bicep version
          
          - task: AzureCLI@2
            displayName: 'Create Resource Group'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üèóÔ∏è Ensuring resource group exists..."
                az group create --name $(resourceGroupName) --location "$(location)" --output table
                echo "‚úÖ Resource group ready!"
          
          - task: AzureCLI@2
            displayName: 'Deploy Bicep Storage Template'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üöÄ Starting Bicep storage template deployment..."
                echo "üìÅ Bicep File: $(bicepFile)"
                echo "üìã Parameters File: $(bicepParamsFile)"
                echo "üè∑Ô∏è Deployment Name: $(deploymentName)"
                echo "üìç Resource Group: $(resourceGroupName)"
                echo ""
                
                # Deploy directly from Bicep (Azure CLI will compile automatically)
                echo "üîÑ Deploying Bicep template..."
                az deployment group create \
                  --resource-group "$(resourceGroupName)" \
                  --template-file "$(bicepFile)" \
                  --parameters @"$(bicepParamsFile)" \
                  --name "$(deploymentName)" \
                  --verbose
                
                DEPLOYMENT_EXIT_CODE=$?
                
                if [ $DEPLOYMENT_EXIT_CODE -ne 0 ]; then
                  echo ""
                  echo "‚ùå Deployment failed with exit code: $DEPLOYMENT_EXIT_CODE"
                  echo "üîç Getting deployment error details..."
                  
                  # Get detailed error information
                  az deployment group show \
                    --resource-group "$(resourceGroupName)" \
                    --name "$(deploymentName)" \
                    --query '{
                      provisioningState: properties.provisioningState,
                      error: properties.error,
                      timestamp: properties.timestamp
                    }' \
                    --output json
                  
                  exit $DEPLOYMENT_EXIT_CODE
                fi
                
                echo "‚úÖ Bicep storage deployment completed successfully!"
                
                # Get deployment outputs
                echo "üì§ Deployment outputs:"
                az deployment group show \
                  --resource-group "$(resourceGroupName)" \
                  --name "$(deploymentName)" \
                  --query properties.outputs \
                  --output table

- stage: TestStorage
  displayName: '‚úÖ Test Storage Account'
  dependsOn: DeployStorage
  condition: succeeded()
  jobs:
  - job: TestStorageAccount
    displayName: 'Test Storage Account Functionality'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'üîç Verify Storage Account'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Storage Account Verification"
          echo "==============================="
          
          # Get deployment outputs to find storage account name
          echo "üìã Getting deployment outputs..."
          STORAGE_NAME=$(az deployment group show \
            --resource-group "$(resourceGroupName)" \
            --name "$(deploymentName)" \
            --query 'properties.outputs.storageAccountName.value' \
            --output tsv)
          
          echo "üóÉÔ∏è Storage Account Name: $STORAGE_NAME"
          
          # Get storage account details
          echo ""
          echo "üìã Storage Account Details:"
          az storage account show \
            --name "$STORAGE_NAME" \
            --resource-group $(resourceGroupName) \
            --query '{
              name: name,
              location: location,
              kind: kind,
              skuName: sku.name,
              skuTier: sku.tier,
              provisioningState: provisioningState,
              primaryLocation: primaryLocation,
              statusOfPrimary: statusOfPrimary,
              httpsOnly: supportsHttpsTrafficOnly,
              minimumTlsVersion: minimumTlsVersion,
              allowBlobPublicAccess: allowBlobPublicAccess
            }' \
            --output table
          
          echo ""
          echo "üîí Security Configuration:"
          az storage account show \
            --name "$STORAGE_NAME" \
            --resource-group $(resourceGroupName) \
            --query '{
              httpsOnly: supportsHttpsTrafficOnly,
              minimumTlsVersion: minimumTlsVersion,
              allowBlobPublicAccess: allowBlobPublicAccess,
              networkDefaultAction: networkRuleSet.defaultAction
            }' \
            --output table
    
    - task: AzureCLI@2
      displayName: 'üß™ Test Storage Functionality'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üß™ Testing Storage Account Functionality"
          echo "========================================"
          
          # Get storage account name from deployment
          STORAGE_NAME=$(az deployment group show \
            --resource-group "$(resourceGroupName)" \
            --name "$(deploymentName)" \
            --query 'properties.outputs.storageAccountName.value' \
            --output tsv)
          
          echo "üóÉÔ∏è Testing Storage Account: $STORAGE_NAME"
          
          # Test creating a container (this validates the storage account is working)
          echo "üì¶ Testing container operations..."
          CONTAINER_NAME="test-container-$(date +%s)"
          
          # Get storage account key
          STORAGE_KEY=$(az storage account keys list \
            --account-name "$STORAGE_NAME" \
            --resource-group $(resourceGroupName) \
            --query '[0].value' \
            --output tsv)
          
          # Create test container
          echo "üì¶ Creating test container: $CONTAINER_NAME"
          az storage container create \
            --name "$CONTAINER_NAME" \
            --account-name "$STORAGE_NAME" \
            --account-key "$STORAGE_KEY" \
            --public-access off
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Container creation successful!"
            
            # List containers to verify
            echo "üìã Existing containers:"
            az storage container list \
              --account-name "$STORAGE_NAME" \
              --account-key "$STORAGE_KEY" \
              --query '[].name' \
              --output table
            
            # Clean up test container
            echo "üßπ Cleaning up test container..."
            az storage container delete \
              --name "$CONTAINER_NAME" \
              --account-name "$STORAGE_NAME" \
              --account-key "$STORAGE_KEY"
            
            echo "‚úÖ Storage account functionality test passed!"
          else
            echo "‚ùå Container creation failed - storage account may have issues"
            exit 1
          fi

- stage: CleanupStorage
  displayName: 'üßπ Cleanup Storage (Manual Only)'
  dependsOn: []
  condition: and(always(), eq(variables['Build.Reason'], 'Manual'))
  jobs:
  - job: ManualCleanupStorage
    displayName: 'Manual Storage Cleanup'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: '‚ö†Ô∏è Storage Cleanup Warning'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "‚ö†Ô∏è STORAGE CLEANUP STAGE" -ForegroundColor Red
          Write-Host "========================" -ForegroundColor Red
          Write-Host "This stage is for manual cleanup only!" -ForegroundColor Yellow
          Write-Host "Uncomment the cleanup task to enable actual resource deletion." -ForegroundColor Yellow
          Write-Host ""
          Write-Host "Resource Group: $(resourceGroupName)" -ForegroundColor White
