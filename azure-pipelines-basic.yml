trigger:
  branches:
    include:
    - main
  paths:
    include:
    - ARM_Deployments/AppGateway/*

variables:
  # Azure Connection Settings
  azureServiceConnection: 'MSFT-NonProd-DevOpsConnection'
  subscriptionId: 'f16506c7-8141-4ef7-8a2e-67f11b6f8acd'
  
  # Resource Settings
  resourceGroupName: 'rg-appgateway-nonprod'
  location: 'eastus'
  
  # Template Files - Updated to use basic template
  templateFile: 'ARM_Deployments/AppGateway/ApplicationGateway-Basic.json'
  parametersFile: 'ARM_Deployments/AppGateway/parameters-basic.json'
  
  # Deployment Settings
  deploymentName: 'AppGateway-Basic-$(Build.BuildId)'
  
  # Basic Configuration
  applicationGatewayName: 'agw-basic-nonprod'
  publicIPName: 'pip-agw-basic-nonprod'
  vnetName: 'vnet-basic-nonprod'
  subnetName: 'snet-appgateway'

stages:
- stage: ValidateAndDeploy
  displayName: 'üöÄ Validate & Deploy Application Gateway'
  jobs:
  - job: DeployBasicAppGateway
    displayName: 'Deploy Basic Application Gateway'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: PowerShell@2
      displayName: 'üìã Display Configuration'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üéØ Basic Application Gateway Deployment" -ForegroundColor Cyan
          Write-Host "=======================================" -ForegroundColor Cyan
          Write-Host "Template: $(templateFile)" -ForegroundColor White
          Write-Host "Parameters: $(parametersFile)" -ForegroundColor White
          Write-Host "Application Gateway: $(applicationGatewayName)" -ForegroundColor White
          Write-Host "Public IP: $(publicIPName)" -ForegroundColor White
          Write-Host "Resource Group: $(resourceGroupName)" -ForegroundColor White
          Write-Host "Location: $(location)" -ForegroundColor White
    
    - task: AzureCLI@2
      displayName: 'üèóÔ∏è Create Resource Group'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üèóÔ∏è Creating resource group..."
          az group create --name $(resourceGroupName) --location "$(location)" --output table
          echo "‚úÖ Resource group ready!"
    
    - task: AzureCLI@2
      displayName: 'üîç Create Virtual Network (Prerequisites)'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üåê Creating virtual network for Application Gateway..."
          
          # Create VNet
          az network vnet create \
            --resource-group $(resourceGroupName) \
            --name $(vnetName) \
            --address-prefix 10.0.0.0/16 \
            --subnet-name $(subnetName) \
            --subnet-prefix 10.0.1.0/24 \
            --output table
          
          echo "‚úÖ Virtual network created!"
          
          # Get subnet ID for parameters
          SUBNET_ID=$(az network vnet subnet show \
            --resource-group $(resourceGroupName) \
            --vnet-name $(vnetName) \
            --name $(subnetName) \
            --query id \
            --output tsv)
          
          echo "üìç Subnet ID: $SUBNET_ID"
          echo "##vso[task.setvariable variable=subnetId]$SUBNET_ID"
    
    - task: AzureCLI@2
      displayName: 'üîç Validate ARM Template'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Validating ARM template..."
          
          az deployment group validate \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --parameters applicationGatewayName="$(applicationGatewayName)" \
            --parameters publicIPName="$(publicIPName)" \
            --parameters subnetId="$(subnetId)" \
            --parameters location="$(location)" \
            --verbose
          
          echo "‚úÖ Template validation completed!"
    
    - task: AzureCLI@2
      displayName: 'üöÄ Deploy Application Gateway'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üöÄ Starting Application Gateway deployment..."
          
          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --name $(deploymentName) \
            --parameters applicationGatewayName="$(applicationGatewayName)" \
            --parameters publicIPName="$(publicIPName)" \
            --parameters subnetId="$(subnetId)" \
            --parameters location="$(location)" \
            --verbose
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Get deployment outputs
          echo "üì§ Getting deployment outputs..."
          az deployment group show \
            --resource-group $(resourceGroupName) \
            --name $(deploymentName) \
            --query properties.outputs \
            --output table
    
    - task: AzureCLI@2
      displayName: '‚úÖ Verify Deployment'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "‚úÖ Verifying Application Gateway deployment..."
          
          # Check Application Gateway status
          az network application-gateway show \
            --name $(applicationGatewayName) \
            --resource-group $(resourceGroupName) \
            --query '{
              name: name,
              location: location,
              provisioningState: provisioningState,
              operationalState: operationalState,
              sku: sku.name,
              tier: sku.tier
            }' \
            --output table
          
          echo ""
          echo "üåê Public IP information:"
          az network public-ip show \
            --name $(publicIPName) \
            --resource-group $(resourceGroupName) \
            --query '{
              name: name,
              ipAddress: ipAddress,
              fqdn: dnsSettings.fqdn,
              allocationMethod: publicIPAllocationMethod
            }' \
            --output table
          
          echo ""
          echo "üéâ Basic Application Gateway deployment completed!"
          echo "üìç You can now configure backend pools and routing rules as needed."
