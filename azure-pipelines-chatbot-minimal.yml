trigger:
  branches:
    include:
    - feature/ai-chatbot-sidecar-llm
  paths:
    include:
    - ARM_Deployments/ChatbotAppService/*

variables:
  azureServiceConnection: 'MSFT-NonProd-DevOpsConnection'
  resourceGroupName: 'rg-chatbot-test'
  location: 'eastus'
  bicepFile: 'ARM_Deployments/ChatbotAppService/ChatbotAppService-Minimal.bicep'
  bicepParamsFile: 'ARM_Deployments/ChatbotAppService/ChatbotAppService-Minimal.bicepparam'
  deploymentName: 'ChatbotMinimal-$(Build.BuildId)'

stages:
- stage: TestDeploy
  displayName: 'üß™ Test Minimal Deployment'
  jobs:
  - job: TestBasicDeployment
    displayName: 'Test Basic App Service Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: PowerShell@2
      displayName: 'üìã Display Test Configuration'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üß™ Minimal Test Deployment" -ForegroundColor Green
          Write-Host "=========================" -ForegroundColor Green
          Write-Host "Resource Group: $(resourceGroupName)" -ForegroundColor White
          Write-Host "Bicep File: $(bicepFile)" -ForegroundColor White
          Write-Host "Params File: $(bicepParamsFile)" -ForegroundColor White
    
    - task: AzureCLI@2
      displayName: 'üîç Check Files and Environment'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Checking environment and files..."
          
          # Check Azure CLI version
          echo "Azure CLI version:"
          az --version
          
          # Check if files exist
          echo ""
          echo "üìÅ Checking template files..."
          if [ -f "$(bicepFile)" ]; then
            echo "‚úÖ Bicep file found: $(bicepFile)"
          else
            echo "‚ùå Bicep file NOT found: $(bicepFile)"
            echo "üìÇ Current directory contents:"
            ls -la ARM_Deployments/ChatbotAppService/
            exit 1
          fi
          
          if [ -f "$(bicepParamsFile)" ]; then
            echo "‚úÖ Parameters file found: $(bicepParamsFile)"
          else
            echo "‚ùå Parameters file NOT found: $(bicepParamsFile)"
            exit 1
          fi
          
          # Show file contents for debugging
          echo ""
          echo "üìÑ Bicep file contents:"
          cat "$(bicepFile)"
          
          echo ""
          echo "üìÑ Parameters file contents:"
          cat "$(bicepParamsFile)"
    
    - task: AzureCLI@2
      displayName: 'üèóÔ∏è Create Resource Group'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üèóÔ∏è Creating resource group..."
          az group create \
            --name $(resourceGroupName) \
            --location $(location) \
            --output table
          echo "‚úÖ Resource group ready!"
    
    - task: AzureCLI@2
      displayName: '‚úÖ Validate Template (without Bicep build)'
      inputs:
        azureServiceConnection: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "‚úÖ Validating template directly..."
          
          # Try validation without bicep build first
          az deployment group validate \
            --resource-group $(resourceGroupName) \
            --template-file "$(bicepFile)" \
            --parameters @"$(bicepParamsFile)" \
            --verbose
          
          echo "‚úÖ Template validation successful!"
    
    - task: AzureCLI@2
      displayName: 'üöÄ Deploy Template'
      inputs:
        azureServiceConnection: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üöÄ Deploying minimal chatbot template..."
          
          # Deploy the template
          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file "$(bicepFile)" \
            --parameters @"$(bicepParamsFile)" \
            --name "$(deploymentName)" \
            --verbose
          
          DEPLOYMENT_EXIT_CODE=$?
          
          if [ $DEPLOYMENT_EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå Deployment failed with exit code: $DEPLOYMENT_EXIT_CODE"
            
            # Get deployment details
            echo "üîç Getting deployment error details..."
            az deployment group show \
              --resource-group $(resourceGroupName) \
              --name "$(deploymentName)" \
              --output json
            
            exit $DEPLOYMENT_EXIT_CODE
          fi
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Get outputs
          echo "üì§ Deployment outputs:"
          az deployment group show \
            --resource-group $(resourceGroupName) \
            --name "$(deploymentName)" \
            --query properties.outputs \
            --output table