# Generic ARM Template Deployment Pipeline
# This pipeline can deploy ANY ARM template by configuring the parameters below

trigger: none # Manual trigger only - configure per deployment

# Pipeline Parameters - Configure these for each ARM template deployment
parameters:
- name: resourceType
  displayName: 'Resource Type (for naming)'
  type: string
  default: 'Resource'
  values:
  - AppGateway
  - StorageAccount
  - VirtualNetwork
  - KeyVault
  - LoadBalancer
  - Resource

- name: templatePath
  displayName: 'ARM Template Path'
  type: string
  default: 'ARM_Deployments/Storage/StorageAccount.json'

- name: parametersPath
  displayName: 'Parameters File Path'
  type: string
  default: 'ARM_Deployments/Storage/parameters.json'

- name: resourceGroupName
  displayName: 'Resource Group Name'
  type: string
  default: 'rg-storage-nonprod'

- name: location
  displayName: 'Azure Location'
  type: string
  default: 'East US'
  values:
  - East US
  - West US
  - East US 2
  - West US 2
  - Central US
  - North Central US
  - South Central US

- name: environment
  displayName: 'Environment'
  type: string
  default: 'nonprod'
  values:
  - nonprod
  - prod
  - dev
  - test

- name: skipCleanup
  displayName: 'Skip Cleanup Stage'
  type: boolean
  default: true

variables:
  # Azure Connection Settings - UPDATE THESE VALUES
  azureServiceConnection: 'MSFT-NonProd-DevOpsConnection'
  subscriptionId: 'f16506c7-8141-4ef7-8a2e-67f11b6f8acd'
  
  # Dynamic Variables
  deploymentName: '${{ parameters.resourceType }}-$(Build.BuildId)'
  environmentName: '${{ parameters.environment }}-azure'

stages:
- stage: Validate
  displayName: 'Validate ARM Template'
  jobs:
  - job: ValidateTemplate
    displayName: 'Validate Template Syntax'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Validate ARM Template'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Validating ARM template: ${{ parameters.templatePath }}"
          echo "üìù Parameters file: ${{ parameters.parametersPath }}"
          echo "üìç Target Resource Group: ${{ parameters.resourceGroupName }}"
          echo "üåç Location: ${{ parameters.location }}"
          
          # Create resource group if it doesn't exist
          az group create --name "${{ parameters.resourceGroupName }}" --location "${{ parameters.location }}"
          
          # Validate the ARM template
          az deployment group validate \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --template-file "${{ parameters.templatePath }}" \
            --parameters @"${{ parameters.parametersPath }}" \
            --verbose
          
          echo "‚úÖ Template validation completed successfully!"

    - task: PublishBuildArtifacts@1
      displayName: 'Publish ARM Templates'
      inputs:
        pathToPublish: 'ARM_Deployments'
        artifactName: 'arm-templates'

- stage: Deploy
  displayName: 'Deploy ARM Template'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: DeployTemplate
    displayName: 'Deploy ${{ parameters.resourceType }}'
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: arm-templates
            displayName: 'Download ARM Templates'
          
          - task: AzureCLI@2
            displayName: 'Deploy ARM Template'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üöÄ Starting deployment of ${{ parameters.resourceType }}"
          echo "üìÅ Template: ${{ parameters.templatePath }}"
          echo "üìã Parameters: ${{ parameters.parametersPath }}"
          echo "üè∑Ô∏è  Deployment Name: $(deploymentName)"
          echo "üìç Resource Group: ${{ parameters.resourceGroupName }}"
          
          # Debug: Show what we're about to deploy
          echo "üîç Debug Information:"
          echo "  - resourceType: ${{ parameters.resourceType }}"
          echo "  - Build.BuildId: $(Build.BuildId)"
          echo "  - Constructed deploymentName: $(deploymentName)"
          echo ""
          
          # Deploy the ARM template
          az deployment group create \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --template-file "$(Pipeline.Workspace)/arm-templates/${{ parameters.templatePath }}" \
            --parameters @"$(Pipeline.Workspace)/arm-templates/${{ parameters.parametersPath }}" \
            --name "$(deploymentName)" \
            --verbose
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Verify the deployment exists before trying to get outputs
          echo "üîç Verifying deployment exists..."
          az deployment group show \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --name "$(deploymentName)" \
            --query '{name: name, provisioningState: properties.provisioningState}' \
            --output table
          
          # Get deployment outputs
          echo "üì§ Deployment outputs:"
          az deployment group show \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --name "$(deploymentName)" \
            --query properties.outputs \
            --output table

- stage: Test
  displayName: 'Test Deployment'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: TestDeployment
    displayName: 'Verify Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Test Deployment Status'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üß™ Testing deployment of ${{ parameters.resourceType }}"
          echo "üîç Debug Information:"
          echo "  - resourceType: ${{ parameters.resourceType }}"
          echo "  - Build.BuildId: $(Build.BuildId)"
          echo "  - Looking for deploymentName: $(deploymentName)"
          echo "  - Resource Group: ${{ parameters.resourceGroupName }}"
          echo ""
          
          # First, list all deployments to see what's available
          echo "üìã All deployments in resource group ${{ parameters.resourceGroupName }}:"
          az deployment group list \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --query '[].{name: name, provisioningState: properties.provisioningState, timestamp: properties.timestamp}' \
            --output table
          echo ""
          
          # Check deployment status
          DEPLOYMENT_STATUS=$(az deployment group show \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --name "$(deploymentName)" \
            --query properties.provisioningState \
            --output tsv 2>/dev/null || echo "NotFound")
          
          echo "üìä Deployment Status: $DEPLOYMENT_STATUS"
          
          if [ "$DEPLOYMENT_STATUS" = "Succeeded" ]; then
            echo "‚úÖ Deployment test passed!"
            
            # List deployed resources
            echo "üìã Resources deployed in ${{ parameters.resourceGroupName }}:"
            az resource list \
              --resource-group "${{ parameters.resourceGroupName }}" \
              --output table
          elif [ "$DEPLOYMENT_STATUS" = "NotFound" ]; then
            echo "‚ùå Deployment $(deploymentName) not found!"
            echo "This might be due to a timing issue or incorrect deployment name."
            exit 1
          else
            echo "‚ùå Deployment test failed with status: $DEPLOYMENT_STATUS"
            exit 1
          fi

- stage: Cleanup
  displayName: 'Cleanup (Optional)'
  dependsOn: Test
  condition: and(succeeded(), eq('${{ parameters.skipCleanup }}', false))
  jobs:
  - job: ManualValidation
    displayName: 'Approve Cleanup'
    pool: server
    timeoutInMinutes: 1440 # 24 hours
    steps:
    - task: ManualValidation@0
      displayName: 'Manual approval for cleanup'
      inputs:
        notifyUsers: |
          $(Build.RequestedForEmail)
        instructions: |
          Please review the deployed resources and approve cleanup if needed.
          Resource Group: ${{ parameters.resourceGroupName }}
          Deployment: $(deploymentName)
        onTimeout: 'reject'

  - job: CleanupResources
    displayName: 'Cleanup Resources'
    dependsOn: ManualValidation
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Remove Test Resources'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üßπ Cleaning up test deployment"
          echo "‚ùó This will delete all resources in ${{ parameters.resourceGroupName }}"
          
          # Delete the resource group (WARNING: This deletes ALL resources in the RG)
          az group delete \
            --name "${{ parameters.resourceGroupName }}" \
            --yes \
            --no-wait
          
          echo "‚úÖ Cleanup initiated (running in background)"
