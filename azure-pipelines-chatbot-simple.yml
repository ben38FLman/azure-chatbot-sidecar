trigger:
  branches:
    include:
    - main
    - feature/*
  paths:
    include:
    - ARM_Deployments/ChatbotAppService/*

variables:
  # Azure Connection Settings
  azureServiceConnection: 'MSFT-NonProd-DevOpsConnection'
  subscriptionId: 'f16506c7-8141-4ef7-8a2e-67f11b6f8acd'
  
  # Resource Settings
  resourceGroupName: 'rg-chatbot-nonprod'
  location: 'eastus'
  
  # Bicep Template Files (using simplified version)
  bicepFile: 'ARM_Deployments/ChatbotAppService/ChatbotAppService-Simple.bicep'
  bicepParamsFile: 'ARM_Deployments/ChatbotAppService/ChatbotAppService-Simple.bicepparam'
  
  # Deployment Settings
  deploymentName: 'ChatbotAppService-Simple-$(Build.BuildId)'

stages:
- stage: ValidateSimpleChatbot
  displayName: 'üîç Validate Simple Bicep Template'
  jobs:
  - job: ValidateTemplate
    displayName: 'Validate Simple Chatbot Bicep Template'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: PowerShell@2
      displayName: 'üìã Display Configuration'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "ü§ñ Simple Chatbot Deployment Configuration" -ForegroundColor Cyan
          Write-Host "=========================================" -ForegroundColor Cyan
          Write-Host "Resource Group: $(resourceGroupName)" -ForegroundColor White
          Write-Host "Location: $(location)" -ForegroundColor White
          Write-Host "Bicep Template: $(bicepFile)" -ForegroundColor White
          Write-Host "Parameters File: $(bicepParamsFile)" -ForegroundColor White
    
    - task: AzureCLI@2
      displayName: 'Install Latest Bicep'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîß Installing latest Bicep CLI..."
          az bicep install
          az bicep version
          echo "‚úÖ Bicep CLI ready!"
    
    - task: AzureCLI@2
      displayName: 'Validate Bicep Template'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Validating Simple Chatbot Bicep template..."
          echo "üìÅ Bicep File: $(bicepFile)"
          echo "üìã Parameters File: $(bicepParamsFile)"
          
          # Check if files exist
          if [ ! -f "$(bicepFile)" ]; then
            echo "‚ùå Bicep file not found: $(bicepFile)"
            exit 1
          fi
          
          if [ ! -f "$(bicepParamsFile)" ]; then
            echo "‚ùå Parameters file not found: $(bicepParamsFile)"
            exit 1
          fi
          
          echo "‚úÖ Files found, proceeding with validation..."
          
          # Compile Bicep to ARM for validation
          echo "üî® Compiling Bicep to ARM..."
          az bicep build --file "$(bicepFile)" --outfile "temp-compiled.json"
          
          echo "üèóÔ∏è Creating resource group for validation..."
          az group create --name $(resourceGroupName) --location "$(location)" --output table
          
          # Validate the compiled template with parameters
          echo "‚úÖ Validating deployment..."
          az deployment group validate \
            --resource-group $(resourceGroupName) \
            --template-file "temp-compiled.json" \
            --parameters @"$(bicepParamsFile)" \
            --verbose
          
          echo "‚úÖ Simple Bicep template validation completed successfully!"

- stage: DeploySimpleChatbot
  displayName: 'üöÄ Deploy Simple Chatbot'
  dependsOn: ValidateSimpleChatbot
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')))
  jobs:
  - deployment: DeploySimpleChatbot
    displayName: 'Deploy Simple Chatbot App Service'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'nonprod-azure'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Repository'
          
          - task: AzureCLI@2
            displayName: 'Install Latest Bicep'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üîß Installing latest Bicep CLI..."
                az bicep install
                az bicep version
          
          - task: AzureCLI@2
            displayName: 'Create Resource Group'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üèóÔ∏è Ensuring resource group exists..."
                az group create --name $(resourceGroupName) --location "$(location)" --output table
                echo "‚úÖ Resource group ready!"
          
          - task: AzureCLI@2
            displayName: 'Deploy Simple Chatbot Template'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üöÄ Starting Simple Chatbot deployment..."
                echo "üìÅ Bicep File: $(bicepFile)"
                echo "üìã Parameters File: $(bicepParamsFile)"
                echo "üè∑Ô∏è Deployment Name: $(deploymentName)"
                echo "üìç Resource Group: $(resourceGroupName)"
                echo ""
                
                # Deploy directly from Bicep
                echo "üîÑ Deploying Bicep template..."
                az deployment group create \
                  --resource-group "$(resourceGroupName)" \
                  --template-file "$(bicepFile)" \
                  --parameters @"$(bicepParamsFile)" \
                  --name "$(deploymentName)" \
                  --verbose
                
                DEPLOYMENT_EXIT_CODE=$?
                
                if [ $DEPLOYMENT_EXIT_CODE -ne 0 ]; then
                  echo ""
                  echo "‚ùå Deployment failed with exit code: $DEPLOYMENT_EXIT_CODE"
                  echo "üîç Getting deployment error details..."
                  
                  # Get detailed error information
                  az deployment group show \
                    --resource-group "$(resourceGroupName)" \
                    --name "$(deploymentName)" \
                    --query '{
                      provisioningState: properties.provisioningState,
                      error: properties.error,
                      timestamp: properties.timestamp
                    }' \
                    --output json
                  
                  exit $DEPLOYMENT_EXIT_CODE
                fi
                
                echo "‚úÖ Simple Chatbot deployment completed successfully!"
                
                # Get deployment outputs
                echo "üì§ Deployment outputs:"
                az deployment group show \
                  --resource-group "$(resourceGroupName)" \
                  --name "$(deploymentName)" \
                  --query properties.outputs \
                  --output table

- stage: TestSimpleChatbot
  displayName: '‚úÖ Test Simple Deployment'
  dependsOn: DeploySimpleChatbot
  condition: succeeded()
  jobs:
  - job: TestDeployment
    displayName: 'Test Simple Chatbot Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'üîç Verify Deployment'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Simple Chatbot Deployment Verification"
          echo "========================================"
          
          # Get App Service URL from deployment outputs
          APP_URL=$(az deployment group show \
            --resource-group "$(resourceGroupName)" \
            --name "$(deploymentName)" \
            --query 'properties.outputs.appServiceUrl.value' \
            --output tsv)
          
          echo "üåê App Service URL: $APP_URL"
          
          # Get App Service details
          APP_NAME=$(az deployment group show \
            --resource-group "$(resourceGroupName)" \
            --name "$(deploymentName)" \
            --query 'properties.outputs.appServiceName.value' \
            --output tsv)
          
          echo ""
          echo "üìã App Service Details:"
          az webapp show \
            --name "$APP_NAME" \
            --resource-group $(resourceGroupName) \
            --query '{
              name: name,
              state: state,
              defaultHostName: defaultHostName,
              kind: kind,
              httpsOnly: httpsOnly
            }' \
            --output table
          
          echo ""
          echo "‚úÖ Simple deployment verification completed!"

- stage: CleanupSimple
  displayName: 'üßπ Cleanup (Manual Only)'
  dependsOn: []
  condition: and(always(), eq(variables['Build.Reason'], 'Manual'))
  jobs:
  - job: ManualCleanup
    displayName: 'Manual Resource Cleanup'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: '‚ö†Ô∏è Cleanup Warning'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "‚ö†Ô∏è CLEANUP STAGE" -ForegroundColor Red
          Write-Host "================" -ForegroundColor Red
          Write-Host "This stage is for manual cleanup only!" -ForegroundColor Yellow
          Write-Host "Uncomment the cleanup task to enable actual resource deletion." -ForegroundColor Yellow
          Write-Host ""
          Write-Host "Resource Group: $(resourceGroupName)" -ForegroundColor White